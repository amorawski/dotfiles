"###### vim-plug ######
call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'schickling/vim-bufonly'
" display trailing whitespace
Plug 'ntpeters/vim-better-whitespace'
" syntax highlighting
Plug 'sheerun/vim-polyglot'
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
Plug 'jparise/vim-graphql'
Plug 'elixir-editors/vim-elixir'
" searching
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
" switch between vim/tmux splits
Plug 'christoomey/vim-tmux-navigator'
" easy commenting
Plug 'tomtom/tcomment_vim'
" line with opened buffers
Plug 'zefei/vim-wintabs'
" manage surrounding tags better
Plug 'tpope/vim-surround'
" display indent guides
Plug 'Yggdroot/indentLine'
" completer
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'neoclide/coc-eslint'
" no-distraction text
Plug 'junegunn/goyo.vim'
" Gblame
Plug 'tpope/vim-fugitive'
" Theme
Plug 'morhetz/gruvbox'
Plug 'frenzyexists/aquarium-vim', { 'branch': 'develop' }
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'sonph/onehalf', { 'rtp': 'vim' }
Plug 'guns/xterm-color-table.vim'
" Repeat tpope plugins with 'dot'
Plug 'tpope/vim-repeat'
Plug 'dhruvasagar/vim-table-mode'
Plug 'bkad/CamelCaseMotion'

Plug 'godlygeek/tabular'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}

call plug#end()
"###### vim-plug ######

"###### basic setup ######
filetype plugin indent on
syntax on
set autoindent
set copyindent
set nowrap
set number
set relativenumber
set smarttab
set cindent
set smartindent
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab
set nocompatible
set hlsearch
set cursorline cursorcolumn
set ignorecase
set showmatch
set smartcase
set ignorecase
set incsearch
set backspace=indent,eol,start
set wildignore=*.swp,*.bak,*.pyc,*.class
set undolevels=1000
set history=1000
set nobackup
set noswapfile
set clipboard=unnamedplus
set nocompatible
set autoread
set splitbelow
let mapleader = "\<Space>"
"###### basic setup ######

"###### nerdtree #####
nmap <silent> <Leader>e :NERDTreeToggle<CR>
let g:NERDTreeWinPos = "right"
"###### nerdtree #####

"###### UI #####
" Remove windows split character (no border between windows :)
set encoding=utf-8
set termencoding=utf-8
set fillchars=vert:\ ,stl:\ ,stlnc:\ " select splitter rendering

"colorscheme gruvbox
let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors
"set t_Co=256
"set term=screen-256color
"let g:dracula_italic = 0
silent! colorscheme dracula
"set background=dark
"###### UI #####

"###### fzf ######
let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git --ignore node_modules -g ""'
nnoremap <Leader>fb :Buffers<CR>
nnoremap <Leader>fm :Marks<CR>
nnoremap <Leader>ff :Files .<CR>
nnoremap <Leader>fg :Ag
"###### fzf ######

"###### buffers ######
" This allows buffers to be hidden if you've modified a buffer.
" This is almost a must if you wish to use buffers in this way.
set hidden
" To open a new empty buffer
" This replaces :tabnew which I used to bind to this mapping
nmap <leader>bn :enew<cr>
" Move to the next buffer
nmap <leader>l :bnext<CR>
" Move to the previous buffer
nmap <leader>h :bprevious<CR>
" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <leader>bq :bp <BAR> bd #<CR>
nmap <leader>bo :BufOnly <CR>

" Show all open buffers and their status
nmap <leader>bl :ls<CR>
"###### buffers ######

"###### indent guides ######
" let g:indent_guides_enable_on_vim_startup = 1
" let g:indent_guides_start_level = 2
" let g:indent_guides_guide_size = 1

" let g:indent_guides_auto_colors = 0
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#424450 ctermbg=238
" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#424450 ctermbg=238
let g:indentLine_char = 'â”Š'
"###### indent guides ######

"###### tricks ######
" Show search results in the middle of the screen
:nnoremap n nzz
:nnoremap N Nzz
:nnoremap * *zz
:nnoremap # #zz
:nnoremap g* g*zz
:nnoremap g# g#zz
"###### tricks ######
"
let g:wintabs_ui_active_left = '['
let g:wintabs_ui_active_right = ']'
let g:wintabs_ui_sep_leftmost = ''
let g:wintabs_ui_sep_inbetween = ''
let g:wintabs_ui_sep_rightmost = ''

au BufRead,BufNewFile *.ex,*.exs set filetype=elixir
au BufRead,BufNewFile *.eex,*.heex,*.leex,*.sface,*.lexs set filetype=eelixir
au BufRead,BufNewFile mix.lock set filetype=elixir
